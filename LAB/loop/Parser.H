/* GANG Software
 * LAB/loop/Parser.H
 * Copyright (C) 2002 Nicholas Schmitt <nick@gang.umass.edu>
 * Wed Sep 18 16:39:46 2002
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */
// Generated by parse++


#ifndef loop_Parser_INCLUDED
#define loop_Parser_INCLUDED

#include "base/ArrayX.H"
#include <complex>
#include "base/System.H"
#include "Common.H"
#include "EvalLoop.H"
#include "Lexer.H"

namespace loop {

class Parser
  :
  public Lexer
{

public:
  Parser();
  virtual ~Parser();

private:

  public:
  int parse( base::ArrayX<EvalLoop::Hash,4> &matrix, base::String const &s );

protected:
  void error( char const *message );

  base::ArrayX<EvalLoop::Hash,4> *_matrix;
  uint _index;

protected:

  int parse();

private:

  static int const FINAL;
  static int const FLAG;
  static int const NTBASE;
  static int const LAST;
  static int const EMPTY;
  static int const EOF_;
  static int const TERROR;
  static int const ERRCODE;
  static int const INITDEPTH;
  static size_t const MAXDEPTH;
  static UCHAR const translate[];
  static short const r1[];
  static short const r2[];
  static short const defact[];
  static short const defgoto[];
  static short const pact[];
  static short const pgoto[];
  static short const table[];
  static short const check[];
  int TRANSLATE( int x)
    { return x <= 273 ? translate[x] : 34; }

  // disabled
  Parser( Parser const & );
  // disabled
  Parser &operator=( Parser const & );


};

} // namespace loop

#endif // loop_Parser_INCLUDED

