/* GANG Software
 * WIDGET/gtk/widget0/Entry.H
 * Copyright (C) 2002 Nicholas Schmitt <nick@gang.umass.edu>
 * Wed Sep 18 16:39:46 2002
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */
// generated by gtk2c++

#ifndef gtk_widget0_Entry_INCLUDED
#define gtk_widget0_Entry_INCLUDED

#include "base/String.H"
#include "widget/ui/String.H"
#include "Editable.H"

namespace gtk {
namespace widget0 {

class Entry
  :
    public widget::ui::String,
    public Editable
{
public:
  Entry() :
      Editable( gtk_entry_new() ) {}
  Entry( uint max ) :
      Editable( gtk_entry_new_with_max_length( max ) ) {}
  void set( char const *s )
    { set_text( s ); }
  void set( base::String const &s )
    { set_text( s.c_str() ); }

  void editable( bool x )
    { gtk_entry_set_editable( GTK_ENTRY(w()), x); }
  char const *get() const
    { return gtk_entry_get_text( GTK_ENTRY(w()) ); }
  void max_length( uint max )
    { gtk_entry_set_max_length( GTK_ENTRY(w()), max ); }

  void set_text( char const *text )
    { gtk_entry_set_text( GTK_ENTRY(w()), text ); }
  void append_text( char const *text )
    { gtk_entry_append_text( GTK_ENTRY(w()), text ); }
  void prepend_text( char const *text )
    { gtk_entry_prepend_text( GTK_ENTRY(w()), text ); }
  void set_position( int position )
    { gtk_entry_set_position( GTK_ENTRY(w()), position ); }
  char* get_text()
    { return gtk_entry_get_text( GTK_ENTRY(w())); }
  void select_region( int start, int end )
    { gtk_entry_select_region( GTK_ENTRY(w()), start, end ); }
  void set_visibility( bool visible )
    { gtk_entry_set_visibility( GTK_ENTRY(w()), visible ); }
  void set_editable( bool editable )
    { gtk_entry_set_editable( GTK_ENTRY(w()), editable ); }
  void set_max_length( uint max )
    { gtk_entry_set_max_length( GTK_ENTRY(w()), max ); }

protected:
  Entry( GtkWidget *x ) : Editable(x) {}
};

} // namespace widget0
} // namespace gtk

#endif // gtk_widget0_Entry_INCLUDED
