/* GANG Software
 * WIDGET/gtk/widget0/Menu.H
 * Copyright (C) 2002 Nicholas Schmitt <nick@gang.umass.edu>
 * Wed Sep 18 16:39:46 2002
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */
// generated by gtk2c++

#ifndef gtk_widget0_Menu_INCLUDED
#define gtk_widget0_Menu_INCLUDED

#include "MenuShell.H"

namespace gtk {
namespace widget0 {

class Menu : public MenuShell
{
public:
  Menu() :
      MenuShell( gtk_menu_new() ) {}
  void append( GtkWidget *child )
    { gtk_menu_append( GTK_MENU(w()), child ); }
  void prepend( GtkWidget *child )
    { gtk_menu_prepend( GTK_MENU(w()), child ); }
  void insert( GtkWidget *child, int position )
    { gtk_menu_insert( GTK_MENU(w()), child, position ); }
  void popup( GtkWidget *parent_menu_shell, GtkWidget *parent_menu_item, GtkMenuPositionFunc func, gpointer data, uint button, guint32 activate_time )
    { gtk_menu_popup( GTK_MENU(w()), parent_menu_shell, parent_menu_item, func, data, button, activate_time ); }
  void reposition()
    { gtk_menu_reposition( GTK_MENU(w())); }
  void popdown()
    { gtk_menu_popdown( GTK_MENU(w())); }
  GtkWidget* get_active()
    { return gtk_menu_get_active( GTK_MENU(w())); }
  void set_active( uint index )
    { gtk_menu_set_active( GTK_MENU(w()), index ); }
  void set_accel_group( GtkAccelGroup *accel_group )
    { gtk_menu_set_accel_group( GTK_MENU(w()), accel_group ); }
  GtkAccelGroup* get_accel_group()
    { return gtk_menu_get_accel_group( GTK_MENU(w())); }
  GtkAccelGroup* get_uline_accel_group()
    { return gtk_menu_get_uline_accel_group( GTK_MENU(w())); }
  GtkAccelGroup* ensure_uline_accel_group()
    { return gtk_menu_ensure_uline_accel_group( GTK_MENU(w())); }
  void attach_to_widget( GtkWidget *attach_widget, GtkMenuDetachFunc detacher )
    { gtk_menu_attach_to_widget( GTK_MENU(w()), attach_widget, detacher ); }
  void detach()
    { gtk_menu_detach( GTK_MENU(w())); }
  GtkWidget* get_attach_widget()
    { return gtk_menu_get_attach_widget( GTK_MENU(w())); }
  void set_tearoff_state( bool torn_off )
    { gtk_menu_set_tearoff_state( GTK_MENU(w()), torn_off ); }
  void set_title( char const *title )
    { gtk_menu_set_title( GTK_MENU(w()), title ); }
  void reorder_child( GtkWidget *child, int position )
    { gtk_menu_reorder_child( GTK_MENU(w()), child, position ); }

protected:
  Menu( GtkWidget *x ) : MenuShell(x) {}
};

} // namespace widget0
} // namespace gtk

#endif // gtk_widget0_Menu_INCLUDED
