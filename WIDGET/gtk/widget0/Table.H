/* GANG Software
 * WIDGET/gtk/widget0/Table.H
 * Copyright (C) 2002 Nicholas Schmitt <nick@gang.umass.edu>
 * Wed Sep 18 16:39:46 2002
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */
// generated by gtk2c++

#ifndef gtk_widget0_Table_INCLUDED
#define gtk_widget0_Table_INCLUDED

#include "Container.H"

namespace gtk {
namespace widget0 {

class Table : public Container
{
public:
  Table( uint rows, uint columns, bool homogeneous ) :
      Container( gtk_table_new( rows, columns, homogeneous ) ) {}
  void add( Widget *child, uint left_attach, uint right_attach, uint top_attach, uint bottom_attach, GtkAttachOptions xoptions, GtkAttachOptions yoptions, uint xpadding, uint ypadding )
    { attach( child->w(), left_attach, right_attach, top_attach, bottom_attach, xoptions, yoptions, xpadding, ypadding ); }

  void resize( uint rows, uint columns )
    { gtk_table_resize( GTK_TABLE(w()), rows, columns ); }
  void attach( GtkWidget *child, uint left_attach, uint right_attach, uint top_attach, uint bottom_attach, GtkAttachOptions xoptions, GtkAttachOptions yoptions, uint xpadding, uint ypadding )
    { gtk_table_attach( GTK_TABLE(w()), child, left_attach, right_attach, top_attach, bottom_attach, xoptions, yoptions, xpadding, ypadding ); }
  void attach_defaults( GtkWidget *widget, uint left_attach, uint right_attach, uint top_attach, uint bottom_attach )
    { gtk_table_attach_defaults( GTK_TABLE(w()), widget, left_attach, right_attach, top_attach, bottom_attach ); }
  void set_row_spacing( uint row, uint spacing )
    { gtk_table_set_row_spacing( GTK_TABLE(w()), row, spacing ); }
  void set_col_spacing( uint column, uint spacing )
    { gtk_table_set_col_spacing( GTK_TABLE(w()), column, spacing ); }
  void set_row_spacings( uint spacing )
    { gtk_table_set_row_spacings( GTK_TABLE(w()), spacing ); }
  void set_col_spacings( uint spacing )
    { gtk_table_set_col_spacings( GTK_TABLE(w()), spacing ); }
  void set_homogeneous( bool homogeneous )
    { gtk_table_set_homogeneous( GTK_TABLE(w()), homogeneous ); }

protected:
  Table( GtkWidget *x ) : Container(x) {}
};

} // namespace widget0
} // namespace gtk

#endif // gtk_widget0_Table_INCLUDED
