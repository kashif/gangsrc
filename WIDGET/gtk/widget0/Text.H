/* GANG Software
 * WIDGET/gtk/widget0/Text.H
 * Copyright (C) 2002 Nicholas Schmitt <nick@gang.umass.edu>
 * Wed Sep 18 16:39:46 2002
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */
// generated by gtk2c++

#ifndef gtk_widget0_Text_INCLUDED
#define gtk_widget0_Text_INCLUDED

#include <string.h>
#include "base/String.H"
#include "base/vector.H"
#include "widget/ui/String.H"
#include "Editable.H"

namespace gtk {
namespace widget0 {

class Text
  :
    public widget::ui::String,
    public Editable
{
public:
  Text() :
      Editable(
        gtk_text_new( (GtkAdjustment *)0, (GtkAdjustment *)0 ) ) {}
  void editable( bool x )
    { gtk_text_set_editable( GTK_TEXT(w()), x ); }
  void set( char const *s )
    {
      // clear
      gtk_text_set_point( GTK_TEXT(w()), 0 );
      int n = gtk_text_get_length( GTK_TEXT(w()) );
      gtk_text_forward_delete( GTK_TEXT(w()), n );

      if (s == (char *)0) { return; }

      // insert
      gtk_text_insert(
        GTK_TEXT(w()), (GdkFont *)0, (GdkColor *)0, (GdkColor *)0,
        s, (int)strlen(s) );
      gtk_text_insert(
        GTK_TEXT(w()), (GdkFont *)0, (GdkColor *)0, (GdkColor *)0,
        "\n", 1 );
    }
  void set( base::String const &v )
    {
      // clear
      gtk_text_set_point( GTK_TEXT(_w), 0 );
      int n = gtk_text_get_length( GTK_TEXT(_w) );
      gtk_text_forward_delete( GTK_TEXT(_w), n );

      // insert
      gtk_text_insert(
        GTK_TEXT(_w), (GdkFont *)0, (GdkColor *)0, (GdkColor *)0,
        v.data(), (int)v.length() );
      gtk_text_insert(
        GTK_TEXT(_w), (GdkFont *)0, (GdkColor *)0, (GdkColor *)0,
        "\n", 1 );
    }

  void set( base::vector<base::String> const &v )
    {
      // clear
      gtk_text_set_point( GTK_TEXT(_w), 0 );
      int n = gtk_text_get_length( GTK_TEXT(_w) );
      gtk_text_forward_delete( GTK_TEXT(_w), n );

      // insert
      uint i;
      for ( i = 0; i < v.size(); i++ )
      {
        gtk_text_insert(
          GTK_TEXT(_w), (GdkFont *)0, (GdkColor *)0, (GdkColor *)0,
      v[i].data(), (int)v[i].length() );
        gtk_text_insert(
          GTK_TEXT(_w), (GdkFont *)0, (GdkColor *)0, (GdkColor *)0,
          "\n", 1 );
      }
    }



  char const *get() const
    { return gtk_editable_get_chars( GTK_EDITABLE(w()), 0, -1 ); }


  Text( GtkAdjustment *hadj, GtkAdjustment *vadj ) :
      Editable( gtk_text_new( hadj, vadj ) ) {}
  void set_editable( bool editable )
    { gtk_text_set_editable( GTK_TEXT(w()), editable ); }
  void set_word_wrap( int word_wrap )
    { gtk_text_set_word_wrap( GTK_TEXT(w()), word_wrap ); }
  void set_line_wrap( int line_wrap )
    { gtk_text_set_line_wrap( GTK_TEXT(w()), line_wrap ); }
  void set_adjustments( GtkAdjustment *hadj, GtkAdjustment *vadj )
    { gtk_text_set_adjustments( GTK_TEXT(w()), hadj, vadj ); }
  void set_point( uint index )
    { gtk_text_set_point( GTK_TEXT(w()), index ); }
  void freeze()
    { gtk_text_freeze( GTK_TEXT(w())); }
  void thaw()
    { gtk_text_thaw( GTK_TEXT(w())); }
  void insert( GdkFont *font, GdkColor *fore, GdkColor *back, const char *chars, int length )
    { gtk_text_insert( GTK_TEXT(w()), font, fore, back, chars, length ); }
  int backward_delete( uint nchars )
    { return gtk_text_backward_delete( GTK_TEXT(w()), nchars ); }
  int forward_delete( uint nchars )
    { return gtk_text_forward_delete( GTK_TEXT(w()), nchars ); }

protected:
  Text( GtkWidget *x ) : Editable(x) {}
};

} // namespace widget0
} // namespace gtk

#endif // gtk_widget0_Text_INCLUDED
