/* GANG Software
 * WIDGET/gtk/widget0/Notebook.H
 * Copyright (C) 2002 Nicholas Schmitt <nick@gang.umass.edu>
 * Wed Sep 18 16:39:46 2002
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */
// generated by gtk2c++

#ifndef gtk_widget0_Notebook_INCLUDED
#define gtk_widget0_Notebook_INCLUDED

#include <iostream>
#include "Label.H"
#include "Container.H"
#include "widget/ui/Choice.H"

namespace gtk {
namespace widget0 {

class Notebook
  :
    public widget::ui::Choice,
    public Container
{
public:
  Notebook() :
      Container( gtk_notebook_new() ), _label_page(0) {}
  void add( Widget *x )
    { gtk_container_add( GTK_CONTAINER(w()), x->w()); }
  void add_label( Widget *x )
    { label(_label_page++, x ); }
  virtual void label( uint page, Widget *x )
    { gtk_notebook_set_tab_label( GTK_NOTEBOOK(w()),
      get_nth_page(page), x->w()); }
  void insert_page( Widget *child, Label *label, uint page )
    { gtk_notebook_insert_page( GTK_NOTEBOOK(w()), child->w(), label->w(),
                                page ); }
  void set( uint page ) { set_page(page); }
  virtual uint get() const { return get_current_page(); }

//  void set_sensitive( bool state )
//    { Widget::set_sensitive(state); }
  virtual void set_sensitive( uint page, bool state )
    { gtk_widget_set_sensitive( get_nth_page(page), state ); }
//  bool showing() const
//    { return Widget::showing(); }
  virtual bool showing( uint n ) const
    { return GTK_WIDGET_VISIBLE( get_nth_page(n) ); }
  virtual void show( bool state = true )
    { Widget::show(state); }
  virtual void show( uint n, bool state )
    {
      if (state)
      { gtk_widget_show( get_nth_page(n) ); }
      else
      { gtk_widget_hide( get_nth_page(n) ); }
    }

  void tab_position(GtkPositionType position) { set_tab_pos(position); }

  void append_page( GtkWidget *child, GtkWidget *tab_label )
    { gtk_notebook_append_page( GTK_NOTEBOOK(w()), child, tab_label ); }
  void append_page_menu( GtkWidget *child, GtkWidget *tab_label, GtkWidget *menu_label )
    { gtk_notebook_append_page_menu( GTK_NOTEBOOK(w()), child, tab_label, menu_label ); }
  void prepend_page( GtkWidget *child, GtkWidget *tab_label )
    { gtk_notebook_prepend_page( GTK_NOTEBOOK(w()), child, tab_label ); }
  void prepend_page_menu( GtkWidget *child, GtkWidget *tab_label, GtkWidget *menu_label )
    { gtk_notebook_prepend_page_menu( GTK_NOTEBOOK(w()), child, tab_label, menu_label ); }
  void insert_page( GtkWidget *child, GtkWidget *tab_label, int position )
    { gtk_notebook_insert_page( GTK_NOTEBOOK(w()), child, tab_label, position ); }
  void insert_page_menu( GtkWidget *child, GtkWidget *tab_label, GtkWidget *menu_label, int position )
    { gtk_notebook_insert_page_menu( GTK_NOTEBOOK(w()), child, tab_label, menu_label, position ); }
  void remove_page( int page_num )
    { gtk_notebook_remove_page( GTK_NOTEBOOK(w()), page_num ); }
  int get_current_page() const
    { return gtk_notebook_get_current_page( GTK_NOTEBOOK(w())); }
  GtkWidget* get_nth_page( int page_num ) const
    { return gtk_notebook_get_nth_page( GTK_NOTEBOOK(w()), page_num ); }
  int page_num( GtkWidget *child ) const
    { return gtk_notebook_page_num( GTK_NOTEBOOK(w()), child ); }
  void set_page( int page_num )
    { gtk_notebook_set_page( GTK_NOTEBOOK(w()), page_num ); }
  void next_page()
    { gtk_notebook_next_page( GTK_NOTEBOOK(w())); }
  void prev_page()
    { gtk_notebook_prev_page( GTK_NOTEBOOK(w())); }
  void set_show_border( bool show_border )
    { gtk_notebook_set_show_border( GTK_NOTEBOOK(w()), show_border ); }
  void set_show_tabs( bool show_tabs )
    { gtk_notebook_set_show_tabs( GTK_NOTEBOOK(w()), show_tabs ); }
  void set_tab_pos( GtkPositionType pos )
    { gtk_notebook_set_tab_pos( GTK_NOTEBOOK(w()), pos ); }
  void set_homogeneous_tabs( bool homogeneous )
    { gtk_notebook_set_homogeneous_tabs( GTK_NOTEBOOK(w()), homogeneous ); }
  void set_tab_border( uint border_width )
    { gtk_notebook_set_tab_border( GTK_NOTEBOOK(w()), border_width ); }
  void set_tab_hborder( uint tab_hborder )
    { gtk_notebook_set_tab_hborder( GTK_NOTEBOOK(w()), tab_hborder ); }
  void set_tab_vborder( uint tab_vborder )
    { gtk_notebook_set_tab_vborder( GTK_NOTEBOOK(w()), tab_vborder ); }
  void set_scrollable( bool scrollable )
    { gtk_notebook_set_scrollable( GTK_NOTEBOOK(w()), scrollable ); }
  void popup_enable()
    { gtk_notebook_popup_enable( GTK_NOTEBOOK(w())); }
  void popup_disable()
    { gtk_notebook_popup_disable( GTK_NOTEBOOK(w())); }
  void set_tab_label( GtkWidget *child, GtkWidget *tab_label )
    { gtk_notebook_set_tab_label( GTK_NOTEBOOK(w()), child, tab_label ); }
  void set_tab_label_text( GtkWidget *child, char const *tab_text )
    { gtk_notebook_set_tab_label_text( GTK_NOTEBOOK(w()), child, tab_text ); }
  void set_menu_label( GtkWidget *child, GtkWidget *menu_label )
    { gtk_notebook_set_menu_label( GTK_NOTEBOOK(w()), child, menu_label ); }
  void set_menu_label_text( GtkWidget *child, char const *menu_text )
    { gtk_notebook_set_menu_label_text( GTK_NOTEBOOK(w()), child, menu_text ); }
#if 0
  void query_tab_label_packing( GtkWidget *child, bool *expand, bool *fill, GtkPackType *pack_type )
    { gtk_notebook_query_tab_label_packing( GTK_NOTEBOOK(w()), child, expand, fill, pack_type ); }
#endif
  void set_tab_label_packing( GtkWidget *child, bool expand, bool fill, GtkPackType pack_type )
    { gtk_notebook_set_tab_label_packing( GTK_NOTEBOOK(w()), child, expand, fill, pack_type ); }
  void reorder_child( GtkWidget *child, int position )
    { gtk_notebook_reorder_child( GTK_NOTEBOOK(w()), child, position ); }

protected:
  Notebook( GtkWidget *x ) : Container(x), _label_page(0) {}
private:
  uint _label_page;
};

} // namespace widget0
} // namespace gtk

#endif // gtk_widget0_Notebook_INCLUDED
