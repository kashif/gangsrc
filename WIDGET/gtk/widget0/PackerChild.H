/* GANG Software
 * WIDGET/gtk/widget0/PackerChild.H
 * Copyright (C) 2002 Nicholas Schmitt <nick@gang.umass.edu>
 * Wed Sep 18 16:39:46 2002
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */
// generated by gtk2c++

#ifndef gtk_widget0_PackerChild_INCLUDED
#define gtk_widget0_PackerChild_INCLUDED

#include "Widget.H"

namespace gtk {
namespace widget0 {

class PackerChild : public Widget
{
public:
  PackerChild() :
      Widget( gtk_packer_new() ) {}
  void add_defaults( GtkWidget *child, GtkSideType side, GtkAnchorType anchor, GtkPackerOptions options )
    { gtk_packer_add_defaults( GTK_PACKER(w()), child, side, anchor, options ); }
  void add( GtkWidget *child, GtkSideType side, GtkAnchorType anchor, GtkPackerOptions options, uint border_width, uint pad_x, uint pad_y, uint i_pad_x, uint i_pad_y )
    { gtk_packer_add( GTK_PACKER(w()), child, side, anchor, options, border_width, pad_x, pad_y, i_pad_x, i_pad_y ); }
  void set_child_packing( GtkWidget *child, GtkSideType side, GtkAnchorType anchor, GtkPackerOptions options, uint border_width, uint pad_x, uint pad_y, uint i_pad_x, uint i_pad_y )
    { gtk_packer_set_child_packing( GTK_PACKER(w()), child, side, anchor, options, border_width, pad_x, pad_y, i_pad_x, i_pad_y ); }
  void reorder_child( GtkWidget *child, int position )
    { gtk_packer_reorder_child( GTK_PACKER(w()), child, position ); }
  void set_spacing( uint spacing )
    { gtk_packer_set_spacing( GTK_PACKER(w()), spacing ); }
  void set_default_border_width( uint border )
    { gtk_packer_set_default_border_width( GTK_PACKER(w()), border ); }
  void set_default_pad( uint pad_x, uint pad_y )
    { gtk_packer_set_default_pad( GTK_PACKER(w()), pad_x, pad_y ); }
  void set_default_ipad( uint i_pad_x, uint i_pad_y )
    { gtk_packer_set_default_ipad( GTK_PACKER(w()), i_pad_x, i_pad_y ); }

protected:
  PackerChild( GtkWidget *x ) : Widget(x) {}
};

} // namespace widget0
} // namespace gtk

#endif // gtk_widget0_PackerChild_INCLUDED
