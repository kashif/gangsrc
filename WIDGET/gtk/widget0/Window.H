/* GANG Software
 * WIDGET/gtk/widget0/Window.H
 * Copyright (C) 2002 Nicholas Schmitt <nick@gang.umass.edu>
 * Wed Sep 18 16:39:46 2002
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */
// generated by gtk2c++

#ifndef gtk_widget0_Window_INCLUDED
#define gtk_widget0_Window_INCLUDED

#include "widget/ui/Window.H"
#include "AccelGroup.H"
#include "Bin.H"

namespace gtk {
namespace widget0 {

class Window
  :
//    virtual public widget::ui::Window,
    public Bin
{
public:
  Window( GtkWindowType type ) :
      Bin( gtk_window_new( type ) ) {}

  virtual void show(bool a = true)
    { if (a) { _show(); } else { Widget::show(false); } }
  virtual void raise()
    { gdk_window_raise(w()->window); }
  virtual void lower()
    { gdk_window_lower(w()->window); }
  virtual void raise(bool a)
    { if (a) { raise(); } else { lower(); } }
  virtual void raise_show(bool a = true)
    { show(a); if (a) { raise(); } }
  virtual void toggle_raise_show()
    { raise_show( ! Widget::showing() ); }

  void add_accel_group( AccelGroup *a )
    { gtk_window_add_accel_group( GTK_WINDOW(w()), a->w() ); }
  void resize(uint x, uint y)
    { gdk_window_resize( w()->window, x, y ); }
  void get_size( int &width, int &height ) const
    { gdk_window_get_size( w()->window, &width, &height ); }
  void get_position( int &x, int &y ) const
    { gdk_window_get_position( w()->window, &x, &y ); }
  uint width() const
    { int x, y; get_size(x, y); return x; }
  uint height() const
    { int x, y; get_size(x, y); return y; }
  uint x_position() const
    { int x, y; get_position(x, y); return x; }
  uint y_position() const
    { int x, y; get_position(x, y); return y; }

  GtkWindowType type() const
    { return GTK_WINDOW(w())->type; }
  void set_title( char const *title )
    { gtk_window_set_title( GTK_WINDOW(w()), title ); }
  void set_wmclass( char const *wmclass_name, char const *wmclass_class )
    { gtk_window_set_wmclass( GTK_WINDOW(w()), wmclass_name, wmclass_class ); }
  void set_policy( int allow_shrink, int allow_grow, int auto_shrink )
    { gtk_window_set_policy( GTK_WINDOW(w()), allow_shrink, allow_grow, auto_shrink ); }
  void add_accel_group( GtkAccelGroup *accel_group )
    { gtk_window_add_accel_group( GTK_WINDOW(w()), accel_group ); }
  void remove_accel_group( GtkAccelGroup *accel_group )
    { gtk_window_remove_accel_group( GTK_WINDOW(w()), accel_group ); }
  void set_position( GtkWindowPosition position )
    { gtk_window_set_position( GTK_WINDOW(w()), position ); }
  int activate_focus()
    { return gtk_window_activate_focus( GTK_WINDOW(w())); }
  int activate_default()
    { return gtk_window_activate_default( GTK_WINDOW(w())); }
  void set_transient_for( GtkWindow *parent )
    { gtk_window_set_transient_for( GTK_WINDOW(w()), parent ); }
  void set_geometry_hints( GtkWidget *geometry_widget, GdkGeometry *geometry, GdkWindowHints geom_mask )
    { gtk_window_set_geometry_hints( GTK_WINDOW(w()), geometry_widget, geometry, geom_mask ); }
  void set_default_size( int width, int height )
    { gtk_window_set_default_size( GTK_WINDOW(w()), width, height ); }
  void set_modal( bool modal )
    { gtk_window_set_modal( GTK_WINDOW(w()), modal ); }
  void set_focus( GtkWidget *focus )
    { gtk_window_set_focus( GTK_WINDOW(w()), focus ); }
  void set_default( GtkWidget *defaultw )
    { gtk_window_set_default( GTK_WINDOW(w()), defaultw ); }
  void remove_embedded_xid( uint xid )
    { gtk_window_remove_embedded_xid( GTK_WINDOW(w()), xid ); }
  void add_embedded_xid( uint xid )
    { gtk_window_add_embedded_xid( GTK_WINDOW(w()), xid ); }
  void reposition( uint x, uint y )
    { gtk_window_reposition( GTK_WINDOW(w()), x, y ); }

protected:
  Window( GtkWidget *x ) : Bin(x) {}
private:
  void _show();

};

} // namespace widget0
} // namespace gtk

#endif // gtk_widget0_Window_INCLUDED
