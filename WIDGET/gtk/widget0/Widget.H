/* GANG Software
 * WIDGET/gtk/widget0/Widget.H
 * Copyright (C) 2002 Nicholas Schmitt <nick@gang.umass.edu>
 * Wed Sep 18 16:39:46 2002
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */
// generated by gtk2c++

#ifndef gtk_widget0_Widget_INCLUDED
#define gtk_widget0_Widget_INCLUDED

#include "base/System.H"
#include "widget/ui/Widget.H"
#include "Object.H"
#include "AccelGroup.H"

namespace gtk {
namespace widget0 {

class Widget
  :
    virtual public ::widget::ui::Widget,
    public Object
{
public:
  Widget( GtkType type, char const *first_arg_name, ... ) :
      Object( GTK_OBJECT(gtk_widget_new(
        type, first_arg_name, first_arg_name ) ) ) {}
  Widget( GtkType type, uint nargs, GtkArg *args ) :
      Object( GTK_OBJECT( gtk_widget_newv( type, nargs, args ) ) ) {}

#if 0
  virtual void show()
    { gtk_widget_show( GTK_WIDGET(w())); }
  virtual void hide()
    { gtk_widget_hide( GTK_WIDGET(w())); }
#endif
  virtual void show(bool a = true)
    {
      if (a)
    { gtk_widget_show( GTK_WIDGET(w())); }
//      { show(); }
      else
    { gtk_widget_hide( GTK_WIDGET(w())); }
//      { hide(); }
    }
  virtual void hide()
    { gtk_widget_hide( GTK_WIDGET(w())); }

  virtual void toggle_show()
    { show(!showing()); }
  virtual bool showing() const
    { return GTK_WIDGET_VISIBLE(w()); }

  void add_accelerator( char const *signal_id, AccelGroup *group, int key,
                    GdkModifierType mods, GtkAccelFlags flags)
    { gtk_widget_add_accelerator(
      GTK_WIDGET(w()), signal_id, group->w(), key, mods, flags ); }
  void usize( int width, int height )
    { set_usize( width, height ); }
  uint width()
    { return w()->allocation.width; }
  uint height()
    { return w()->allocation.height; }
  void draw()
    { draw( (GdkRectangle *)0 ); }

  void ref()
    { gtk_widget_ref( GTK_WIDGET(w())); }
  void unref()
    { gtk_widget_unref( GTK_WIDGET(w())); }
  void destroy()
    { gtk_widget_destroy( GTK_WIDGET(w())); }
  void destroyed( GtkWidget **widget_pointer )
    { gtk_widget_destroyed( GTK_WIDGET(w()), widget_pointer ); }
#if 0
  void get( GtkArg *arg )
    { gtk_widget_get( GTK_WIDGET(w()), arg ); }
#endif
  void getv( uint nargs, GtkArg *args )
    { gtk_widget_getv( GTK_WIDGET(w()), nargs, args ); }
#if 0
  void set( char const *first_arg_name, ... )
    { gtk_widget_set( GTK_WIDGET(w()), first_arg_name, first_arg_name ); }
#endif
  void setv( uint nargs, GtkArg *args )
    { gtk_widget_setv( GTK_WIDGET(w()), nargs, args ); }
  void unparent()
    { gtk_widget_unparent( GTK_WIDGET(w())); }
  void show_now()
    { gtk_widget_show_now( GTK_WIDGET(w())); }
  void show_all()
    { gtk_widget_show_all( GTK_WIDGET(w())); }
  void hide_all()
    { gtk_widget_hide_all( GTK_WIDGET(w())); }
  void map()
    { gtk_widget_map( GTK_WIDGET(w())); }
  void unmap()
    { gtk_widget_unmap( GTK_WIDGET(w())); }
  void realize()
    { gtk_widget_realize( GTK_WIDGET(w())); }
  void unrealize()
    { gtk_widget_unrealize( GTK_WIDGET(w())); }
  void queue_draw()
    { gtk_widget_queue_draw( GTK_WIDGET(w())); }
  void queue_draw_area( int x, int y, int width, int height )
    { gtk_widget_queue_draw_area( GTK_WIDGET(w()), x, y, width, height ); }
  void queue_clear()
    { gtk_widget_queue_clear( GTK_WIDGET(w())); }
  void queue_clear_area( int x, int y, int width, int height )
    { gtk_widget_queue_clear_area( GTK_WIDGET(w()), x, y, width, height ); }
  void queue_resize()
    { gtk_widget_queue_resize( GTK_WIDGET(w())); }
  void draw( GdkRectangle *area )
    { gtk_widget_draw( GTK_WIDGET(w()), area ); }
  void draw_focus()
    { gtk_widget_draw_focus( GTK_WIDGET(w())); }
  void draw_default()
    { gtk_widget_draw_default( GTK_WIDGET(w())); }
  void size_request( GtkRequisition *requisition )
    { gtk_widget_size_request( GTK_WIDGET(w()), requisition ); }
  void size_allocate( GtkAllocation *allocation )
    { gtk_widget_size_allocate( GTK_WIDGET(w()), allocation ); }
  void get_child_requisition( GtkRequisition *requisition )
    { gtk_widget_get_child_requisition( GTK_WIDGET(w()), requisition ); }
  void add_accelerator( char const *accel_signal, GtkAccelGroup *accel_group, uint accel_key, uint accel_mods, GtkAccelFlags accel_flags )
    { gtk_widget_add_accelerator( GTK_WIDGET(w()), accel_signal, accel_group, accel_key, accel_mods, accel_flags ); }
  void remove_accelerator( GtkAccelGroup *accel_group, uint accel_key, uint accel_mods )
    { gtk_widget_remove_accelerator( GTK_WIDGET(w()), accel_group, accel_key, accel_mods ); }
  void remove_accelerators( char const *accel_signal, bool visible_only )
    { gtk_widget_remove_accelerators( GTK_WIDGET(w()), accel_signal, visible_only ); }
  uint accelerator_signal( GtkAccelGroup *accel_group, uint accel_key, uint accel_mods )
    { return gtk_widget_accelerator_signal( GTK_WIDGET(w()), accel_group, accel_key, accel_mods ); }
  void lock_accelerators()
    { gtk_widget_lock_accelerators( GTK_WIDGET(w())); }
  void unlock_accelerators()
    { gtk_widget_unlock_accelerators( GTK_WIDGET(w())); }
  bool accelerators_locked()
    { return gtk_widget_accelerators_locked( GTK_WIDGET(w())); }
  int event( GdkEvent *event )
    { return gtk_widget_event( GTK_WIDGET(w()), event ); }

bool activate()
    { return gtk_widget_activate( GTK_WIDGET(w())); }
  bool set_scroll_adjustments( GtkAdjustment *hadjustment, GtkAdjustment *vadjustment )
    { return gtk_widget_set_scroll_adjustments( GTK_WIDGET(w()), hadjustment, vadjustment ); }
  void reparent( GtkWidget *new_parent )
    { gtk_widget_reparent( GTK_WIDGET(w()), new_parent ); }
  void popup( int x, int y )
    { gtk_widget_popup( GTK_WIDGET(w()), x, y ); }
  int intersect( GdkRectangle *area, GdkRectangle *intersection )
    { return gtk_widget_intersect( GTK_WIDGET(w()), area, intersection ); }
  void grab_focus()
    { gtk_widget_grab_focus( GTK_WIDGET(w())); }
  void grab_default()
    { gtk_widget_grab_default( GTK_WIDGET(w())); }
  void set_name( char const *name )
    { gtk_widget_set_name( GTK_WIDGET(w()), name ); }
  char* get_name()
    { return gtk_widget_get_name( GTK_WIDGET(w())); }
  void set_state( GtkStateType state )
    { gtk_widget_set_state( GTK_WIDGET(w()), state ); }
  virtual void set_sensitive( bool sensitive = true )
    { gtk_widget_set_sensitive( GTK_WIDGET(w()), sensitive ); }
  void set_app_paintable( bool app_paintable )
    { gtk_widget_set_app_paintable( GTK_WIDGET(w()), app_paintable ); }
  void set_parent( GtkWidget *parent )
    { gtk_widget_set_parent( GTK_WIDGET(w()), parent ); }
  void set_parent_window( GdkWindow *parent_window )
    { gtk_widget_set_parent_window( GTK_WIDGET(w()), parent_window ); }
  GdkWindow *gtk_widget_get_parent_window (GtkWidget *widget);
  void set_uposition( int x, int y )
    { gtk_widget_set_uposition( GTK_WIDGET(w()), x, y ); }
  void set_usize( int width, int height )
    { gtk_widget_set_usize( GTK_WIDGET(w()), width, height ); }
  void set_events( int events )
    { gtk_widget_set_events( GTK_WIDGET(w()), events ); }
  void add_events( int events )
    { gtk_widget_add_events( GTK_WIDGET(w()), events ); }
  void set_extension_events( GdkExtensionMode mode )
    { gtk_widget_set_extension_events( GTK_WIDGET(w()), mode ); }

GdkExtensionMode get_extension_events()
    { return gtk_widget_get_extension_events( GTK_WIDGET(w())); }
  GtkWidget* get_toplevel()
    { return gtk_widget_get_toplevel( GTK_WIDGET(w())); }
  GtkWidget* get_ancestor( GtkType widget_type )
    { return gtk_widget_get_ancestor( GTK_WIDGET(w()), widget_type ); }
  GdkColormap* get_colormap()
    { return gtk_widget_get_colormap( GTK_WIDGET(w())); }
  GdkVisual* get_visual()
    { return gtk_widget_get_visual( GTK_WIDGET(w())); }
  void set_colormap( GdkColormap *colormap )
    { gtk_widget_set_colormap( GTK_WIDGET(w()), colormap ); }
#if 0
  void set_visual( GdkVisual *visual )
    { gtk_widget_set_visual( GTK_WIDGET(w()), visual ); }
#endif
  int get_events()
    { return gtk_widget_get_events( GTK_WIDGET(w())); }
  void get_pointer( int *x, int *y )
    { gtk_widget_get_pointer( GTK_WIDGET(w()), x, y ); }
  int is_ancestor( GtkWidget *ancestor )
    { return gtk_widget_is_ancestor( GTK_WIDGET(w()), ancestor ); }
  int hide_on_delete()
    { return gtk_widget_hide_on_delete( GTK_WIDGET(w())); }
  void set_style( GtkStyle *style )
    { gtk_widget_set_style( GTK_WIDGET(w()), style ); }
  void set_rc_style()
    { gtk_widget_set_rc_style( GTK_WIDGET(w())); }
  void ensure_style()
    { gtk_widget_ensure_style( GTK_WIDGET(w())); }
  GtkStyle* get_style()
    { return gtk_widget_get_style( GTK_WIDGET(w())); }
  void restore_default_style()
    { gtk_widget_restore_default_style( GTK_WIDGET(w())); }
  void modify_style( GtkRcStyle *style )
    { gtk_widget_modify_style( GTK_WIDGET(w()), style ); }
  void set_composite_name( char const *name )
    { gtk_widget_set_composite_name( GTK_WIDGET(w()), name ); }
  char* get_composite_name()
    { return gtk_widget_get_composite_name( GTK_WIDGET(w())); }
  void reset_rc_styles()
    { gtk_widget_reset_rc_styles( GTK_WIDGET(w())); }
#if 0
  void push_style()
    { gtk_widget_push_style( GTK_WIDGET(w())); }
  void push_colormap()
    { gtk_widget_push_colormap( GTK_WIDGET(w())); }
  void push_visual()
    { gtk_widget_push_visual( GTK_WIDGET(w())); }
  void push_composite_child()
    { gtk_widget_push_composite_child( GTK_WIDGET(w())); }
  void pop_composite_child()
    { gtk_widget_pop_composite_child( GTK_WIDGET(w())); }
  void pop_style()
    { gtk_widget_pop_style( GTK_WIDGET(w())); }
  void pop_colormap()
    { gtk_widget_pop_colormap( GTK_WIDGET(w())); }
  void pop_visual()
    { gtk_widget_pop_visual( GTK_WIDGET(w())); }
  void set_default_style()
    { rgtk_widget_set_default_style( GTK_WIDGET(w())); }
  void set_default_colormap()
    { gtk_widget_set_default_colormap( GTK_WIDGET(w())); }
  void set_default_visual()
    { gtk_widget_set_default_visual( GTK_WIDGET(w())); }
  GtkStyle* get_default_style()
    { return gtk_widget_get_default_style( GTK_WIDGET(w())); }
  GdkColormap* get_default_colormap()
    { return gtk_widget_get_default_colormap( GTK_WIDGET(w())); }
  GdkVisual* get_default_visual()
    { return gtk_widget_get_default_visual( GTK_WIDGET(w())); }
#endif
  void shape_combine_mask( GdkBitmap *shape_mask, int offset_x, int offset_y )
    { gtk_widget_shape_combine_mask( GTK_WIDGET(w()), shape_mask, offset_x, offset_y ); }
  void reset_shapes()
    { gtk_widget_reset_shapes( GTK_WIDGET(w())); }
  void path( uint *path_length, char **path, char **path_reversed )
    { gtk_widget_path( GTK_WIDGET(w()), path_length, path, path_reversed ); }
  void class_path( uint *path_length, char **path, char **path_reversed )
    { gtk_widget_class_path( GTK_WIDGET(w()), path_length, path, path_reversed ); }

  GtkWidget *w() { return GTK_WIDGET(_w); }
  GtkWidget const *w() const { return GTK_WIDGET(_w); }
protected:
  Widget( GtkWidget *x ) :
      Object( x == (GtkWidget *)0 ? (GtkObject *)0 : GTK_OBJECT(x) ) {}
};

} // namespace widget0
} // namespace gtk

#endif // gtk_widget0_Widget_INCLUDED
