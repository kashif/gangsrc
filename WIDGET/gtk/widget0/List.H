/* GANG Software
 * WIDGET/gtk/widget0/List.H
 * Copyright (C) 2002 Nicholas Schmitt <nick@gang.umass.edu>
 * Wed Sep 18 16:39:46 2002
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */
// generated by gtk2c++

#ifndef gtk_widget0_List_INCLUDED
#define gtk_widget0_List_INCLUDED

#include "Container.H"

namespace gtk {
namespace widget0 {

class List : public Container
{
public:
  List() :
      Container( gtk_list_new() ) {}
  void insert_items( GList *items, int position )
    { gtk_list_insert_items( GTK_LIST(w()), items, position ); }
  void append_items( GList *items )
    { gtk_list_append_items( GTK_LIST(w()), items ); }
  void prepend_items( GList *items )
    { gtk_list_prepend_items( GTK_LIST(w()), items ); }
  void remove_items( GList *items )
    { gtk_list_remove_items( GTK_LIST(w()), items ); }
  void remove_items_no_unref( GList *items )
    { gtk_list_remove_items_no_unref( GTK_LIST(w()), items ); }
  void clear_items( int start, int end )
    { gtk_list_clear_items( GTK_LIST(w()), start, end ); }
  void select_item( int item )
    { gtk_list_select_item( GTK_LIST(w()), item ); }
  void unselect_item( int item )
    { gtk_list_unselect_item( GTK_LIST(w()), item ); }
  void select_child( GtkWidget *child )
    { gtk_list_select_child( GTK_LIST(w()), child ); }
  void unselect_child( GtkWidget *child )
    { gtk_list_unselect_child( GTK_LIST(w()), child ); }
  int child_position( GtkWidget *child )
    { return gtk_list_child_position( GTK_LIST(w()), child ); }
  void set_selection_mode( GtkSelectionMode mode )
    { gtk_list_set_selection_mode( GTK_LIST(w()), mode ); }
  void extend_selection( GtkScrollType scroll_type, float position, bool auto_start_selection )
    { gtk_list_extend_selection( GTK_LIST(w()), scroll_type, position, auto_start_selection ); }
  void start_selection()
    { gtk_list_start_selection( GTK_LIST(w())); }
  void end_selection()
    { gtk_list_end_selection( GTK_LIST(w())); }
  void select_all()
    { gtk_list_select_all( GTK_LIST(w())); }
  void unselect_all()
    { gtk_list_unselect_all( GTK_LIST(w())); }
  void scroll_horizontal( GtkScrollType scroll_type, float position )
    { gtk_list_scroll_horizontal( GTK_LIST(w()), scroll_type, position ); }
  void scroll_vertical( GtkScrollType scroll_type, float position )
    { gtk_list_scroll_vertical( GTK_LIST(w()), scroll_type, position ); }
  void toggle_add_mode()
    { gtk_list_toggle_add_mode( GTK_LIST(w())); }
  void toggle_focus_row()
    { gtk_list_toggle_focus_row( GTK_LIST(w())); }
  void toggle_row( GtkWidget *item )
    { gtk_list_toggle_row( GTK_LIST(w()), item ); }
  void undo_selection()
    { gtk_list_undo_selection( GTK_LIST(w())); }
  void end_drag_selection()
    { gtk_list_end_drag_selection( GTK_LIST(w())); }

protected:
  List( GtkWidget *x ) : Container(x) {}
};

} // namespace widget0
} // namespace gtk

#endif // gtk_widget0_List_INCLUDED
