/* GANG Software
 * WIDGET/gtk/widget0/Box.H
 * Copyright (C) 2002 Nicholas Schmitt <nick@gang.umass.edu>
 * Wed Sep 18 16:39:46 2002
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */
// generated by gtk2c++

#ifndef gtk_widget0_Box_INCLUDED
#define gtk_widget0_Box_INCLUDED

#include "Container.H"

namespace gtk {
namespace widget0 {

class Box : public Container
{
public:
  virtual void add( Widget *x, bool expand, bool fill, int padding )
    { gtk_box_pack_start( GTK_BOX(w()), x->w(), expand, fill, padding ); }
  void add_end( Widget *x, bool expand, bool fill, int padding )
    { gtk_box_pack_end( GTK_BOX(w()), x->w(), expand, fill, padding ); }
  void pack_start( GtkWidget *child, bool expand, bool fill, uint padding )
    { gtk_box_pack_start( GTK_BOX(w()), child, expand, fill, padding ); }
  void pack_end( GtkWidget *child, bool expand, bool fill, uint padding )
    { gtk_box_pack_end( GTK_BOX(w()), child, expand, fill, padding ); }
  void pack_start_defaults( GtkWidget *widget )
    { gtk_box_pack_start_defaults( GTK_BOX(w()), widget ); }
  void pack_end_defaults( GtkWidget *widget )
    { gtk_box_pack_end_defaults( GTK_BOX(w()), widget ); }
  void set_homogeneous( bool homogeneous )
    { gtk_box_set_homogeneous( GTK_BOX(w()), homogeneous ); }
  void set_spacing( int spacing )
    { gtk_box_set_spacing( GTK_BOX(w()), spacing ); }
  void reorder_child( GtkWidget *child, int position )
    { gtk_box_reorder_child( GTK_BOX(w()), child, position ); }
#if 0
  void query_child_packing( GtkWidget *child, bool *expand, bool *fill, uint *padding, GtkPackType *pack_type )
    { gtk_box_query_child_packing( GTK_BOX(w()), child, expand, fill, padding, pack_type ); }
#endif
  void set_child_packing( GtkWidget *child, bool expand, bool fill, uint padding, GtkPackType pack_type )
    { gtk_box_set_child_packing( GTK_BOX(w()), child, expand, fill, padding, pack_type ); }

protected:
  Box( GtkWidget *x ) : Container(x) {}
};

} // namespace widget0
} // namespace gtk

#endif // gtk_widget0_Box_INCLUDED
