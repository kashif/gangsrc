/* GANG Software
 * WIDGET/gtk/widget0/Tree.H
 * Copyright (C) 2002 Nicholas Schmitt <nick@gang.umass.edu>
 * Wed Sep 18 16:39:46 2002
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */
// generated by gtk2c++

#ifndef gtk_widget0_Tree_INCLUDED
#define gtk_widget0_Tree_INCLUDED

#include "Container.H"

namespace gtk {
namespace widget0 {

class Tree : public Container
{
public:
  Tree() :
      Container( gtk_tree_new() ) {}
  void append( GtkWidget *tree_item )
    { gtk_tree_append( GTK_TREE(w()), tree_item ); }
  void prepend( GtkWidget *tree_item )
    { gtk_tree_prepend( GTK_TREE(w()), tree_item ); }
  void insert( GtkWidget *tree_item, int position )
    { gtk_tree_insert( GTK_TREE(w()), tree_item, position ); }
  void remove_items( GList *items )
    { gtk_tree_remove_items( GTK_TREE(w()), items ); }
  void clear_items( int start, int end )
    { gtk_tree_clear_items( GTK_TREE(w()), start, end ); }
  void select_item( int item )
    { gtk_tree_select_item( GTK_TREE(w()), item ); }
  void unselect_item( int item )
    { gtk_tree_unselect_item( GTK_TREE(w()), item ); }
  void select_child( GtkWidget *tree_item )
    { gtk_tree_select_child( GTK_TREE(w()), tree_item ); }
  void unselect_child( GtkWidget *tree_item )
    { gtk_tree_unselect_child( GTK_TREE(w()), tree_item ); }
  int child_position( GtkWidget *child )
    { return gtk_tree_child_position( GTK_TREE(w()), child ); }
  void set_selection_mode( GtkSelectionMode mode )
    { gtk_tree_set_selection_mode( GTK_TREE(w()), mode ); }
  void set_view_mode( GtkTreeViewMode mode )
    { gtk_tree_set_view_mode( GTK_TREE(w()), mode ); }
  void set_view_lines( uint flag )
    { gtk_tree_set_view_lines( GTK_TREE(w()), flag ); }
  void remove_item( GtkWidget *child )
    { gtk_tree_remove_item( GTK_TREE(w()), child ); }

protected:
  Tree( GtkWidget *x ) : Container(x) {}
};

} // namespace widget0
} // namespace gtk

#endif // gtk_widget0_Tree_INCLUDED
