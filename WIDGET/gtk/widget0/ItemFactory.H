/* GANG Software
 * WIDGET/gtk/widget0/ItemFactory.H
 * Copyright (C) 2002 Nicholas Schmitt <nick@gang.umass.edu>
 * Wed Sep 18 16:39:46 2002
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */
// generated by gtk2c++

#ifndef gtk_widget0_ItemFactory_INCLUDED
#define gtk_widget0_ItemFactory_INCLUDED

#include "Object.H"

namespace gtk {
namespace widget0 {

class ItemFactory : public Object
{
public:
  ItemFactory( GtkType container_type, char const *path, GtkAccelGroup *accel_group ) :
      Object( GTK_OBJECT(gtk_item_factory_new( container_type, path, accel_group ) ) ) {}
  void construct( GtkType container_type, char const *path, GtkAccelGroup *accel_group )
    { gtk_item_factory_construct( GTK_ITEM_FACTORY(w()), container_type, path, accel_group ); }
#if 0
  void parse_rc()
    { gtk_item_factory_parse_rc( GTK_ITEM_FACTORY(w())); }
  void parse_rc_string()
    { gtk_item_factory_parse_rc_string( GTK_ITEM_FACTORY(w())); }
  void parse_rc_scanner()
    { gtk_item_factory_parse_rc_scanner( GTK_ITEM_FACTORY(w())); }
  void add_foreign( char const *full_path, GtkAccelGroup *accel_group, uint keyval, GdkModifierType modifiers )
    { gtk_item_factory_add_foreign( GTK_ITEM_FACTORY(w()), full_path, accel_group, keyval, modifiers ); }
  GtkItemFactory* from_widget()
    { return gtk_item_factory_from_widget( GTK_ITEM_FACTORY(w())); }
  char* path_from_widget()
    { return gtk_item_factory_path_from_widget( GTK_ITEM_FACTORY(w())); }
#endif
  GtkWidget* get_item( char const *path )
    { return gtk_item_factory_get_item( GTK_ITEM_FACTORY(w()), path ); }
  GtkWidget* get_widget( char const *path )
    { return gtk_item_factory_get_widget( GTK_ITEM_FACTORY(w()), path ); }
  GtkWidget* get_widget_by_action( uint action )
    { return gtk_item_factory_get_widget_by_action( GTK_ITEM_FACTORY(w()), action ); }
  GtkWidget* get_item_by_action( uint action )
    { return gtk_item_factory_get_item_by_action( GTK_ITEM_FACTORY(w()), action ); }
#if 0
  void dump_items( bool modified_only, GtkPrintFunc print_func, gpointer func_data )
    { gtk_item_factory_dump_items( GTK_ITEM_FACTORY(w()), modified_only, print_func, func_data ); }
  void dump_rc( GtkPatternSpec *path_pspec, bool modified_only )
    { gtk_item_factory_dump_rc( GTK_ITEM_FACTORY(w()), path_pspec, modified_only ); }
#endif
  void print_func( char *string )
    { gtk_item_factory_print_func( GTK_ITEM_FACTORY(w()), string ); }
  void create_item( GtkItemFactoryEntry *entry, gpointer callback_data, uint callback_type )
    { gtk_item_factory_create_item( GTK_ITEM_FACTORY(w()), entry, callback_data, callback_type ); }
  void create_items( uint n_entries, GtkItemFactoryEntry *entries, gpointer callback_data )
    { gtk_item_factory_create_items( GTK_ITEM_FACTORY(w()), n_entries, entries, callback_data ); }
  void delete_item( char const *path )
    { gtk_item_factory_delete_item( GTK_ITEM_FACTORY(w()), path ); }
  void delete_entry( GtkItemFactoryEntry *entry )
    { gtk_item_factory_delete_entry( GTK_ITEM_FACTORY(w()), entry ); }
  void delete_entries( uint n_entries, GtkItemFactoryEntry *entries )
    { gtk_item_factory_delete_entries( GTK_ITEM_FACTORY(w()), n_entries, entries ); }
  void popup( uint x, uint y, uint mouse_button, guint32 time )
    { gtk_item_factory_popup( GTK_ITEM_FACTORY(w()), x, y, mouse_button, time ); }
  gpointer popup_data()
    { return gtk_item_factory_popup_data( GTK_ITEM_FACTORY(w())); }
#if 0
  gpointer popup_data_from_widget()
    { return gtk_item_factory_popup_data_from_widget( GTK_ITEM_FACTORY(w())); }
#endif
  void set_translate_func( GtkTranslateFunc func, gpointer data, GtkDestroyNotify notify )
    { gtk_item_factory_set_translate_func( GTK_ITEM_FACTORY(w()), func, data, notify ); }
#if 0
  GtkItemFactory* from_path()
    { return gtk_item_factory_from_path( GTK_ITEM_FACTORY(w())); }
  void create_menu_entries( GtkMenuEntry *entries )
    { gtk_item_factory_create_menu_entries( GTK_ITEM_FACTORY(w()), entries ); }
  void gtk_item_factories_path_delete( char const *path )
    { gtk_item_factories_path_delete( GTK_ITEM_FACTORY(w()), path ); }
  typedef void( gpointer callback_data, uint callback_action )
    { return void( GTK_ITEM_FACTORY(w()), callback_data, callback_action ); }
#endif
  void create_items_ac( uint n_entries, GtkItemFactoryEntry *entries, gpointer callback_data, uint callback_type )
    { gtk_item_factory_create_items_ac( GTK_ITEM_FACTORY(w()), n_entries, entries, callback_data, callback_type ); }

protected:
  ItemFactory( GtkObject *x ) : Object( x) {}
};

} // namespace widget0
} // namespace gtk

#endif // gtk_widget0_ItemFactory_INCLUDED
