/* GANG Software
 * WIDGET/gtk/widget0/ButtonBox.H
 * Copyright (C) 2002 Nicholas Schmitt <nick@gang.umass.edu>
 * Wed Sep 18 16:39:46 2002
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */
// generated by gtk2c++

#ifndef gtk_widget0_ButtonBox_INCLUDED
#define gtk_widget0_ButtonBox_INCLUDED

#include "Box.H"

namespace gtk {
namespace widget0 {

class ButtonBox : public Box
{
public:
#if 0
  void get_child_size_default( int *min_height )
    { gtk_button_box_get_child_size_default( GTK_BUTTON_BOX(w()), min_height ); }
  void get_child_ipadding_default( int *ipad_y )
    { gtk_button_box_get_child_ipadding_default( GTK_BUTTON_BOX(w()), ipad_y ); }
  void set_child_size_default( int min_height )
    { gtk_button_box_set_child_size_default( GTK_BUTTON_BOX(w()), min_height ); }
  void set_child_ipadding_default( int ipad_y )
    { gtk_button_box_set_child_ipadding_default( GTK_BUTTON_BOX(w()), ipad_y ); }
#endif
  int get_spacing()
    { return gtk_button_box_get_spacing( GTK_BUTTON_BOX(w())); }
  GtkButtonBoxStyle get_layout()
    { return gtk_button_box_get_layout( GTK_BUTTON_BOX(w())); }
  void get_child_size( int *min_width, int *min_height )
    { gtk_button_box_get_child_size( GTK_BUTTON_BOX(w()), min_width, min_height ); }
  void get_child_ipadding( int *ipad_x, int *ipad_y )
    { gtk_button_box_get_child_ipadding( GTK_BUTTON_BOX(w()), ipad_x, ipad_y ); }
  void set_spacing( int spacing )
    { gtk_button_box_set_spacing( GTK_BUTTON_BOX(w()), spacing ); }
  void set_layout( GtkButtonBoxStyle layout_style )
    { gtk_button_box_set_layout( GTK_BUTTON_BOX(w()), layout_style ); }
  void set_child_size( int min_width, int min_height )
    { gtk_button_box_set_child_size( GTK_BUTTON_BOX(w()), min_width, min_height ); }
  void set_child_ipadding( int ipad_x, int ipad_y )
    { gtk_button_box_set_child_ipadding( GTK_BUTTON_BOX(w()), ipad_x, ipad_y ); }
#if 0
  void child_requisition( int *nvis_children, int *width, int *height )
    { gtk_button_box_child_requisition( GTK_BUTTON_BOX(w()), nvis_children, width, height ); }
#endif
protected:
  ButtonBox( GtkWidget *x ) : Box(x) {}
};

} // namespace widget0
} // namespace gtk

#endif // gtk_widget0_ButtonBox_INCLUDED
