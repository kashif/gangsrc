/* GANG Software
 * WIDGET/gtk/widget0/CTree.H
 * Copyright (C) 2002 Nicholas Schmitt <nick@gang.umass.edu>
 * Wed Sep 18 16:39:46 2002
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */
// generated by gtk2c++

#ifndef gtk_widget0_CTree_INCLUDED
#define gtk_widget0_CTree_INCLUDED

#include "CList.H"

namespace gtk {
namespace widget0 {

class CTree : public CList
{
public:
  void construct( int columns, int tree_column, char *titles[] )
    { gtk_ctree_construct( GTK_CTREE(w()), columns, tree_column, titles ); }
  void remove_node( GtkCTreeNode *node )
    { gtk_ctree_remove_node( GTK_CTREE(w()), node ); }
  void post_recursive( GtkCTreeNode *node, GtkCTreeFunc func, gpointer data )
    { gtk_ctree_post_recursive( GTK_CTREE(w()), node, func, data ); }
  void post_recursive_to_depth( GtkCTreeNode *node, int depth, GtkCTreeFunc func, gpointer data )
    { gtk_ctree_post_recursive_to_depth( GTK_CTREE(w()), node, depth, func, data ); }
  void pre_recursive( GtkCTreeNode *node, GtkCTreeFunc func, gpointer data )
    { gtk_ctree_pre_recursive( GTK_CTREE(w()), node, func, data ); }
  void pre_recursive_to_depth( GtkCTreeNode *node, int depth, GtkCTreeFunc func, gpointer data )
    { gtk_ctree_pre_recursive_to_depth( GTK_CTREE(w()), node, depth, func, data ); }
  bool is_viewable( GtkCTreeNode *node )
    { return gtk_ctree_is_viewable( GTK_CTREE(w()), node ); }
  bool find( GtkCTreeNode *node, GtkCTreeNode *child )
    { return gtk_ctree_find( GTK_CTREE(w()), node, child ); }
  bool is_ancestor( GtkCTreeNode *node, GtkCTreeNode *child )
    { return gtk_ctree_is_ancestor( GTK_CTREE(w()), node, child ); }
  bool is_hot_spot( int x, int y )
    { return gtk_ctree_is_hot_spot( GTK_CTREE(w()), x, y ); }
  void move( GtkCTreeNode *node, GtkCTreeNode *new_parent, GtkCTreeNode *new_sibling )
    { gtk_ctree_move( GTK_CTREE(w()), node, new_parent, new_sibling ); }
  void expand( GtkCTreeNode *node )
    { gtk_ctree_expand( GTK_CTREE(w()), node ); }
  void expand_recursive( GtkCTreeNode *node )
    { gtk_ctree_expand_recursive( GTK_CTREE(w()), node ); }
  void expand_to_depth( GtkCTreeNode *node, int depth )
    { gtk_ctree_expand_to_depth( GTK_CTREE(w()), node, depth ); }
  void collapse( GtkCTreeNode *node )
    { gtk_ctree_collapse( GTK_CTREE(w()), node ); }
  void collapse_recursive( GtkCTreeNode *node )
    { gtk_ctree_collapse_recursive( GTK_CTREE(w()), node ); }
  void collapse_to_depth( GtkCTreeNode *node, int depth )
    { gtk_ctree_collapse_to_depth( GTK_CTREE(w()), node, depth ); }
  void toggle_expansion( GtkCTreeNode *node )
    { gtk_ctree_toggle_expansion( GTK_CTREE(w()), node ); }
  void toggle_expansion_recursive( GtkCTreeNode *node )
    { gtk_ctree_toggle_expansion_recursive( GTK_CTREE(w()), node ); }
  void select( GtkCTreeNode *node )
    { gtk_ctree_select( GTK_CTREE(w()), node ); }
  void select_recursive( GtkCTreeNode *node )
    { gtk_ctree_select_recursive( GTK_CTREE(w()), node ); }
  void unselect( GtkCTreeNode *node )
    { gtk_ctree_unselect( GTK_CTREE(w()), node ); }
  void unselect_recursive( GtkCTreeNode *node )
    { gtk_ctree_unselect_recursive( GTK_CTREE(w()), node ); }
  void real_select_recursive( GtkCTreeNode *node, int state )
    { gtk_ctree_real_select_recursive( GTK_CTREE(w()), node, state ); }
  void node_set_text( GtkCTreeNode *node, int column, char const *text )
    { gtk_ctree_node_set_text( GTK_CTREE(w()), node, column, text ); }
  void node_set_pixmap( GtkCTreeNode *node, int column, GdkPixmap *pixmap, GdkBitmap *mask )
    { gtk_ctree_node_set_pixmap( GTK_CTREE(w()), node, column, pixmap, mask ); }
  void node_set_pixtext( GtkCTreeNode *node, int column, char const *text, guint8 spacing, GdkPixmap *pixmap, GdkBitmap *mask )
    { gtk_ctree_node_set_pixtext( GTK_CTREE(w()), node, column, text, spacing, pixmap, mask ); }
  void set_node_info( GtkCTreeNode *node, char const *text, guint8 spacing, GdkPixmap *pixmap_closed, GdkBitmap *mask_closed, GdkPixmap *pixmap_opened, GdkBitmap *mask_opened, bool is_leaf, bool expanded )
    { gtk_ctree_set_node_info( GTK_CTREE(w()), node, text, spacing, pixmap_closed, mask_closed, pixmap_opened, mask_opened, is_leaf, expanded ); }
  void node_set_shift( GtkCTreeNode *node, int column, int vertical, int horizontal )
    { gtk_ctree_node_set_shift( GTK_CTREE(w()), node, column, vertical, horizontal ); }
  void node_set_selectable( GtkCTreeNode *node, bool selectable )
    { gtk_ctree_node_set_selectable( GTK_CTREE(w()), node, selectable ); }
  bool node_get_selectable( GtkCTreeNode *node )
    { return gtk_ctree_node_get_selectable( GTK_CTREE(w()), node ); }
  GtkCellType node_get_cell_type( GtkCTreeNode *node, int column )
    { return gtk_ctree_node_get_cell_type( GTK_CTREE(w()), node, column ); }
  int node_get_text( GtkCTreeNode *node, int column, char **text )
    { return gtk_ctree_node_get_text( GTK_CTREE(w()), node, column, text ); }
  int node_get_pixmap( GtkCTreeNode *node, int column, GdkPixmap **pixmap, GdkBitmap **mask )
    { return gtk_ctree_node_get_pixmap( GTK_CTREE(w()), node, column, pixmap, mask ); }
  int node_get_pixtext( GtkCTreeNode *node, int column, char **text, guint8 *spacing, GdkPixmap **pixmap, GdkBitmap **mask )
    { return gtk_ctree_node_get_pixtext( GTK_CTREE(w()), node, column, text, spacing, pixmap, mask ); }
#if 0
  int get_node_info( GtkCTreeNode *node, char **text, guint8 *spacing, GdkPixmap **pixmap_closed, GdkBitmap **mask_closed, GdkPixmap **pixmap_opened, GdkBitmap **mask_opened, bool *is_leaf, bool *expanded )
    { return gtk_ctree_get_node_info( GTK_CTREE(w()), node, text, spacing, pixmap_closed, mask_closed, pixmap_opened, mask_opened, is_leaf, expanded ); }
#endif
  void node_set_row_style( GtkCTreeNode *node, GtkStyle *style )
    { gtk_ctree_node_set_row_style( GTK_CTREE(w()), node, style ); }
  void node_set_cell_style( GtkCTreeNode *node, int column, GtkStyle *style )
    { gtk_ctree_node_set_cell_style( GTK_CTREE(w()), node, column, style ); }
  void node_set_foreground( GtkCTreeNode *node, GdkColor *color )
    { gtk_ctree_node_set_foreground( GTK_CTREE(w()), node, color ); }
  void node_set_background( GtkCTreeNode *node, GdkColor *color )
    { gtk_ctree_node_set_background( GTK_CTREE(w()), node, color ); }
  void node_set_row_data( GtkCTreeNode *node, gpointer data )
    { gtk_ctree_node_set_row_data( GTK_CTREE(w()), node, data ); }
  void node_set_row_data_full( GtkCTreeNode *node, gpointer data, GtkDestroyNotify destroy )
    { gtk_ctree_node_set_row_data_full( GTK_CTREE(w()), node, data, destroy ); }
  gpointer node_get_row_data( GtkCTreeNode *node )
    { return gtk_ctree_node_get_row_data( GTK_CTREE(w()), node ); }
  void node_moveto( GtkCTreeNode *node, int column, float row_align, float col_align )
    { gtk_ctree_node_moveto( GTK_CTREE(w()), node, column, row_align, col_align ); }
  GtkVisibility node_is_visible( GtkCTreeNode *node )
    { return gtk_ctree_node_is_visible( GTK_CTREE(w()), node ); }
  void set_indent( int indent )
    { gtk_ctree_set_indent( GTK_CTREE(w()), indent ); }
  void set_spacing( int spacing )
    { gtk_ctree_set_spacing( GTK_CTREE(w()), spacing ); }
  void set_show_stub( bool show_stub )
    { gtk_ctree_set_show_stub( GTK_CTREE(w()), show_stub ); }
  void set_line_style( GtkCTreeLineStyle line_style )
    { gtk_ctree_set_line_style( GTK_CTREE(w()), line_style ); }
  void set_expander_style( GtkCTreeExpanderStyle expander_style )
    { gtk_ctree_set_expander_style( GTK_CTREE(w()), expander_style ); }
  void set_drag_compare_func( GtkCTreeCompareDragFunc cmp_func )
    { gtk_ctree_set_drag_compare_func( GTK_CTREE(w()), cmp_func ); }
  void sort_node( GtkCTreeNode *node )
    { gtk_ctree_sort_node( GTK_CTREE(w()), node ); }
  void sort_recursive( GtkCTreeNode *node )
    { gtk_ctree_sort_recursive( GTK_CTREE(w()), node ); }

protected:
  CTree( GtkWidget *x ) : CList(x) {}
};

} // namespace widget0
} // namespace gtk

#endif // gtk_widget0_CTree_INCLUDED
