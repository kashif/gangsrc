/* GANG Software
 * WIDGET/gtk/widget0/SpinButton.H
 * Copyright (C) 2002 Nicholas Schmitt <nick@gang.umass.edu>
 * Wed Sep 18 16:39:46 2002
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */
// generated by gtk2c++

#ifndef gtk_widget0_SpinButton_INCLUDED
#define gtk_widget0_SpinButton_INCLUDED

#include "widget/ui/Int.H"
#include "Entry.H"

namespace gtk {
namespace widget0 {

class SpinButton
  :
    public widget::ui::Int,
    public Widget // should be Entry
{
public:
  SpinButton( GtkAdjustment *adjustment, float climb_rate,
              uint digits ) :
      Widget( gtk_spin_button_new( adjustment, climb_rate, digits ) ) {}
  SpinButton(
    float climb_rate, uint digits,
    float lower, float upper,
    float step_increment, float page_increment,
    float value ) :
      Widget( gtk_spin_button_new(
        (GtkAdjustment *)gtk_adjustment_new(
          value, lower, upper, step_increment, page_increment, 0.0f ),
        climb_rate, digits ) ) {}

  void configure(
    GtkAdjustment *adjustment, float climb_rate, uint digits )
    { gtk_spin_button_configure( GTK_SPIN_BUTTON(w()), adjustment, climb_rate,
                                 digits ); }

  void set( int x ) { set_value( float(x) ); }
  void set( uint x ) { set_value( float(x) ); }
  void set( float x ) { set_value( x ); }
  int get_int() const { return get_value_as_int(); }
  float get_float() const { return get_value_as_float(); }
  virtual int get() const
    { return get_int(); }

  void set_adjustment( GtkAdjustment *adjustment )
    { gtk_spin_button_set_adjustment( GTK_SPIN_BUTTON(w()), adjustment ); }
  GtkAdjustment* get_adjustment()
    { return gtk_spin_button_get_adjustment( GTK_SPIN_BUTTON(w())); }
  void set_digits( uint digits )
    { gtk_spin_button_set_digits( GTK_SPIN_BUTTON(w()), digits ); }
  float get_value_as_float() const
    { return gtk_spin_button_get_value_as_float( GTK_SPIN_BUTTON(w())); }
  int get_value_as_int() const
    { return gtk_spin_button_get_value_as_int( GTK_SPIN_BUTTON(w())); }
  void set_value( float value )
    { gtk_spin_button_set_value( GTK_SPIN_BUTTON(w()), value ); }
  void set_update_policy( GtkSpinButtonUpdatePolicy policy )
    { gtk_spin_button_set_update_policy( GTK_SPIN_BUTTON(w()), policy ); }
  void set_numeric( bool numeric )
    { gtk_spin_button_set_numeric( GTK_SPIN_BUTTON(w()), numeric ); }
  void spin( GtkSpinType direction, float increment )
    { gtk_spin_button_spin( GTK_SPIN_BUTTON(w()), direction, increment ); }
  void set_wrap( bool wrap )
    { gtk_spin_button_set_wrap( GTK_SPIN_BUTTON(w()), wrap ); }
  void set_shadow_type( GtkShadowType shadow_type )
    { gtk_spin_button_set_shadow_type( GTK_SPIN_BUTTON(w()), shadow_type ); }
  void set_snap_to_ticks( bool snap_to_ticks )
    { gtk_spin_button_set_snap_to_ticks( GTK_SPIN_BUTTON(w()), snap_to_ticks ); }
  void update()
    { gtk_spin_button_update( GTK_SPIN_BUTTON(w())); }

protected:
  SpinButton( GtkWidget *x ) : Widget(x) {}
};

} // namespace widget0
} // namespace gtk

#endif // gtk_widget0_SpinButton_INCLUDED
